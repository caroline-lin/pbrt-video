Polytope in a Bathroom
======================

Things to Show
--------------

Progression:

- Killeroo video?  Rotating the camera.
- 2d wireframe, then animation
- 3D wireframe, then animation
- Polytope on its own
- bathroom on its own

- Final video

Influences / Prior Art
----------------------

- Bathsheba
- 4D Toys, Miegakure (120 cell)
- Flatland, etc.

TODO: What's the best explanation of 4D?  Extruding 2D to 3D
  1978 video
  numberphile video


Components
----------

- ~900 lines of our own Python code
- ~200 lines of Schlafli interpreter in Python
  - link:

- Libraries used
  - numpy for linear algebra
  - scipy for convex hull algorithm
  - matplotlib for plotting the prototypes

- Tools used:
  - ImageMagick for resizing frames, joining frames to video
  - PBRT for rendering
  - GUI Tool: Meshlab for combining the polytope with the bathroom scene

- ~500 lines of shell
  - Coordinating Python, PBRT, ImageMagick, etc.
  - Running rendering over 3 machines
    - Rendering time: 4-8 hours on 33 cores/66 hyperthreads over 3 Heap
      machines
    - mod-sharding with shell scripts!
  - ssh, rsync
  - xargs -P for resizing frames in parallel

- ~5800 lines of textual PBRT description for bathroom
  - 19 MB geometry
  - 14 MB textures
  - 21 MB blend file?
  - Sky environment map (imgtool)


Algorithm / Pipeline 
--------------------

https://news.ycombinator.com/item?id=17687033


Step 1: Use Schlafli generator from here [1]. Schlafli numbers are a compact
description of regular polytopes, and there is a recursive algorithm to
generate vertices, edges, faces, etc. from them. The base case of the
recursion is dimension 1, so you make 4 calls to get to dimension 4.

Step 2: Intersect the edges of the polytope with a hyperplane (a 3D subset of
4D).

Step 3: You get a set of 3D points out of step 2. Draw the convex hull of
them, which gives you triangles.

Step 4: Render the triangles somehow. I used matplotlib's 3d facilities
(mplot3d), and we are working on raytracing them.

Step 5: Animate over different hyperplanes. Take the min and max in the w
plane and that will give you non-empty slices. Now you can "see" the 4D
polytope using time as the 4th dimension.

I sure he is doing something more advanced (4D collision detection), but this
is all we needed to reproduce something that looks kinda cool.

[1] https://github.com/aruth2/schlafli

Also:
- Rotate the camera
- Rotate the polytope

Pipeline

- Export to PBRT
- Distribute code, data, and configuration to 3 machines with rsync
- render to PNG with PBRT running under tmux (so we don't lose the sessions)
- Copy frames back with rsync
- Resize frames and join to video with ImageMagick

Things Learned
--------------

- Schlafli symbol representation of polytopes in arbitrary dimensions
- v-polytope vs. h-polytope 
  - Convex Hull converts between two representations
- math for line segment-plane intersection (this generalized from 3D to 4D
  easily, so we didn't need to do anything special)
- rotations in 3D and 4D
- animations with matplotlib
- Raytracing -- tuning the sample and size parameters

- File formats
  - PLY mesh format
  - EXR image format

- ipython3 (hadn't used it before)

Possible Directions
-------------------

- More polytopes in more scenes
  - Reduce manual work
- Automation could be improved / more foolproof
- Interactive polytopes in the browser (several existing implementations)
- Android Filament: real-time rendering?


Credits
-------

- Schlafli interpreter
- Bathroom Scene

